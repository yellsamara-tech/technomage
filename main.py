import os
import asyncio
from datetime import date, datetime
from aiohttp import web
import requests

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# ====== –í–ê–ñ–ù–û: –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –ë–î –∏–∑ db.py ======
from db import (
    init_db, add_user, get_user, get_all_users,
    make_admin, revoke_admin, delete_user,
    update_status, get_status_history
)

# ========= –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è =========
BOT_TOKEN   = os.getenv("BOT_TOKEN",   "8304128948:AAGfzX5TIABL3DVKkmynWovRvEEVvtPsTzg")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://dia-804u.onrender.com/webhook")  # –∏–º–µ–Ω–Ω–æ /webhook
PORT        = int(os.getenv("PORT", "8000"))
CREATOR_ID  = int(os.getenv("CREATOR_ID", "452908347"))

# ========= –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ =========
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# ========= FSM =========
class Registration(StatesGroup):
    waiting_for_fullname = State()
    waiting_for_tabel = State()
    waiting_for_phone = State()

class Broadcast(StatesGroup):
    waiting_for_text = State()

# ========= –°—Ç–∞—Ç—É—Å—ã (–∫–Ω–æ–ø–∫–∏) =========
statuses = [
    "üü¢ –Ø –Ω–∞ —Ä–∞–±–æ—Ç–µ (–°–ü)",
    "üî¥ –Ø –±–æ–ª–µ—é (–ë)",
    "üïí –Ø –≤ –¥–æ—Ä–æ–≥–µ (–°–ü)",
    "üìå –£ –º–µ–Ω—è –æ—Ç–≥—É–ª (–í—Ä)"
]

user_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=statuses[0]), KeyboardButton(text=statuses[1])],
        [KeyboardButton(text=statuses[2]), KeyboardButton(text=statuses[3])]
    ],
    resize_keyboard=True
)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
        [KeyboardButton(text="üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞"), KeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="‚úâÔ∏è –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"), KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤")]
    ],
    resize_keyboard=True
)

# ========= –•–µ–ª–ø–µ—Ä—ã =========
async def is_admin(user_id: int) -> bool:
    u = await get_user(user_id)
    if not u:
        return False
    return bool(u["is_admin"] or (user_id == CREATOR_ID))

# ========= –•—ç–Ω–¥–ª–µ—Ä—ã =========
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n"
            "–í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û:"
        )
        await state.set_state(Registration.waiting_for_fullname)
    else:
        kb = admin_kb if await is_admin(message.from_user.id) else user_kb
        await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∏–∂–µ:", reply_markup=kb)

@dp.message(Registration.waiting_for_fullname)
async def reg_fullname(message: types.Message, state: FSMContext):
    await state.update_data(fullname=message.text.strip())
    await message.answer("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:")
    await state.set_state(Registration.waiting_for_tabel)

@dp.message(Registration.waiting_for_tabel)
async def reg_tabel(message: types.Message, state: FSMContext):
    await state.update_data(tabel=message.text.strip())
    await message.answer("üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Registration.waiting_for_phone)

@dp.message(Registration.waiting_for_phone)
async def reg_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()
    fullname = data.get("fullname", "").strip()
    tabel = data.get("tabel", "").strip()
    phone = message.text.strip()
    is_admin_flag = (message.from_user.id == CREATOR_ID)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await add_user(
        user_id=message.from_user.id,
        full_name=f"{fullname} ({tabel})" if tabel else fullname,
        tab_number=tabel,
        phone=phone,
        is_admin=is_admin_flag
    )
    await state.clear()

    kb = admin_kb if is_admin_flag else user_kb
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=kb)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
@dp.message(lambda m: m.text in statuses)
async def set_user_status_handler(message: types.Message):
    await update_status(message.from_user.id, message.text)
    await message.answer(f"‚úÖ –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {message.text}")

# ======== –ê–¥–º–∏–Ω–∫–∞ ========

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(lambda m: m.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def admin_show_users(message: types.Message):
    if not await is_admin(message.from_user.id):
        return
    users = await get_all_users()
    if not users:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    lines = []
    for u in users:
        role = "üõ°Ô∏è –ê–¥–º–∏–Ω" if u["is_admin"] else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        lines.append(f"{u['user_id']} | {u['full_name']} | {role}")
    await message.answer("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(lines))

# –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞ (inline —Å–ø–∏—Å–æ–∫)
@dp.message(lambda m: m.text == "üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def admin_assign(message: types.Message):
    if message.from_user.id != CREATOR_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return
    users = await get_all_users()
    candidates = [u for u in users if not u["is_admin"]]
    if not candidates:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=u["full_name"], callback_data=f"makeadmin_{u['user_id']}")]
            for u in candidates
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º:", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("makeadmin_"))
async def callback_makeadmin(call: types.CallbackQuery):
    if call.from_user.id != CREATOR_ID:
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    user_id = int(call.data.split("_", 1)[1])
    await make_admin(user_id)
    await call.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.")
    await call.answer()

# –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞ (inline —Å–ø–∏—Å–æ–∫)
@dp.message(lambda m: m.text == "‚ùå –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞")
async def admin_remove(message: types.Message):
    if message.from_user.id != CREATOR_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–∏–º–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return
    users = await get_all_users()
    admins = [u for u in users if u["is_admin"] and u["user_id"] != CREATOR_ID]
    if not admins:
        await message.answer("–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=u["full_name"], callback_data=f"removeadmin_{u['user_id']}")]
            for u in admins
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤:", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("removeadmin_"))
async def callback_removeadmin(call: types.CallbackQuery):
    if call.from_user.id != CREATOR_ID:
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    user_id = int(call.data.split("_", 1)[1])
    await revoke_admin(user_id)
    await call.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ª–∏—à—ë–Ω –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞.")
    await call.answer()

# –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (inline —Å–ø–∏—Å–æ–∫)
@dp.message(lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def admin_delete_user(message: types.Message):
    if not await is_admin(message.from_user.id):
        return
    users = await get_all_users()
    deletable = [u for u in users if u["user_id"] != CREATOR_ID]
    if not deletable:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=u["full_name"], callback_data=f"deleteuser_{u['user_id']}")]
            for u in deletable
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("deleteuser_"))
async def callback_delete_user(call: types.CallbackQuery):
    if not await is_admin(call.from_user.id):
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    user_id = int(call.data.split("_", 1)[1])
    await delete_user(user_id)
    await call.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω.")
    await call.answer()

# –†–∞—Å—Å—ã–ª–∫–∞
@dp.message(lambda m: m.text == "‚úâÔ∏è –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def admin_broadcast(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Broadcast.waiting_for_text)

@dp.message(Broadcast.waiting_for_text)
async def send_broadcast(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await state.clear()
        return
    text = message.text
    users = await get_all_users()
    success = 0
    fail = 0
    for u in users:
        try:
            await bot.send_message(u["user_id"], f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n{text}")
            success += 1
        except Exception:
            fail += 1
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {success}, –û—à–∏–±–∫–∏: {fail}")
    await state.clear()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
@dp.message(lambda m: m.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤")
async def admin_status_stats(message: types.Message):
    if not await is_admin(message.from_user.id):
        return
    today = date.today()
    users = await get_all_users()
    counters = {s: 0 for s in statuses}
    for u in users:
        rows = await get_status_history(u["user_id"], today)
        if rows:
            # –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            last = rows[-1]
            st = last["status"]
            if st in counters:
                counters[st] += 1
    lines = [f"{k}: {v}" for k, v in counters.items()]
    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ {today}:\n" + "\n".join(lines))

# ========= Webhook handlers (aiohttp) =========
async def index(request: web.Request):
    return web.Response(text="OK: bot is running")

async def webhook_get(request: web.Request):
    # —á—Ç–æ–± —Ä—É–∫–∞–º–∏ –∑–∞—Ö–æ–¥–∏—Ç—å –±–µ–∑ 405
    return web.Response(text="Webhook endpoint. Use POST from Telegram.")

async def webhook_post(request: web.Request):
    try:
        data = await request.json()
    except Exception:
        return web.Response(status=400, text="Bad JSON")

    try:
        update = types.Update.model_validate(data)
    except Exception as e:
        print("Update validate error:", e)
        return web.Response(status=400, text="Bad Update")

    try:
        await dp.feed_update(bot, update)
    except Exception as e:
        print("feed_update error:", e)
    return web.Response(text="ok")

app = web.Application()
app.router.add_get("/", index)
app.router.add_get("/webhook", webhook_get)
app.router.add_post("/webhook", webhook_post)

# ========= Startup / Shutdown =========
async def on_startup(app: web.Application):
    print("Starting up...")
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(app: web.Application):
    print("Shutting down...")
    await bot.delete_webhook()
    await bot.session.close()

app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# ========= Entry point =========
if __name__ == "__main__":
    web.run_app(app, port=PORT)
