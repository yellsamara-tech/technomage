import os
import asyncio
from datetime import date
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from db import (
    init_db, add_user, get_user, update_status, get_all_users,
    get_status_history, find_user_by_name, get_admins
)
from aiogram.dispatcher.middlewares.error import BaseErrorMiddleware

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–æ—Ä—è—á–∏–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
status_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –†–∞–±–æ—Ç–∞—é"), KeyboardButton(text="ü§í –ë–æ–ª–µ—é")],
        [KeyboardButton(text="üèñ –û—Ç–ø—É—Å–∫"), KeyboardButton(text="‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å"), KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")]
    ],
    resize_keyboard=True
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π middleware –¥–ª—è –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫
class MyErrorMiddleware(BaseErrorMiddleware):
    async def __call__(self, handler, event, data):
        try:
            return await handler(event, data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ö—ç–Ω–¥–ª–µ—Ä–µ: {e}")
            return None

dp.message.middleware(MyErrorMiddleware())

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    try:
        user = await get_user(message.from_user.id)
        if user:
            # –î—É–±–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
            today = date.today()
            history = await get_status_history(user['id'])
            if history and history[-1]['status_date'] != today:
                await update_status(user['id'], user['status'])
            await message.answer(
                f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: {user['full_name']}\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:",
                reply_markup=status_kb
            )
        else:
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def process_message(message: types.Message):
    try:
        user = await get_user(message.from_user.id)
        if not user:
            full_name = message.text.strip()
            await add_user(message.from_user.id, full_name)
            await message.answer(
                f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ–±—è –∫–∞–∫: {full_name}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:",
                reply_markup=status_kb
            )
            return

        text = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if text == "‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å":
            last_status = user['status'] if user['status'] else "–µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω"
            await message.answer(f"üìå –¢–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {last_status}")
            return

        # –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
            await message.answer("–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç–æ–º üëá", reply_markup=status_kb)
            return

        # –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        if text == "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
            await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëá")
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        await update_status(user['id'], text)
        await message.answer(f"üìå –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {text}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_message: {e}")

# –ê–¥–º–∏–Ω: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(Command("list"))
async def list_users(message: types.Message):
    try:
        admins = await get_admins()
        if message.from_user.id not in [a['id'] for a in admins]:
            await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        users = await get_all_users()
        text = "\n".join([f"{u['id']} ‚Äî {u['full_name']} ‚Äî {u['status'] or '–Ω–µ –≤—ã–±—Ä–∞–Ω'}" for u in users])
        await message.answer(f"üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /list: {e}")

# –ê–¥–º–∏–Ω: –ø–æ–∏—Å–∫ –ø–æ –§–ò–û
@dp.message(Command("find"))
async def find_user(message: types.Message):
    try:
        admins = await get_admins()
        if message.from_user.id not in [a['id'] for a in admins]:
            await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /find <–§–ò–û>")
            return
        name = args[1]
        users = await find_user_by_name(name)
        if not users:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        text = "\n".join([f"{u['id']} ‚Äî {u['full_name']} ‚Äî {u['status'] or '–Ω–µ –≤—ã–±—Ä–∞–Ω'}" for u in users])
        await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n{text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /find: {e}")

# –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
@dp.message(Command("history"))
async def status_history(message: types.Message):
    try:
        user = await get_user(message.from_user.id)
        if not user:
            await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return
        history = await get_status_history(user['id'])
        if not history:
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—É—Å—Ç–∞.")
            return
        text = "\n".join([f"{h['status_date']}: {h['status']}" for h in history])
        await message.answer(f"üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–≤–æ–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤:\n{text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /history: {e}")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ 18:00 –ø–æ –°–∞–º–∞—Ä—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
async def send_daily_reminder():
    try:
        users = await get_all_users()
        for user in users:
            try:
                await bot.send_message(
                    user['id'],
                    "‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!",
                    reply_markup=status_kb
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user['id']}: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_daily_reminder: {e}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await init_db()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler(timezone=timezone("Asia/Samarkand"))
    scheduler.add_job(send_daily_reminder, 'cron', hour=18, minute=0)
    scheduler.start()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
