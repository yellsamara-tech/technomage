import os
import asyncio
from datetime import date, datetime
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from db import (
    init_db, add_user, get_user, update_status,
    get_all_users, get_admins, make_admin, revoke_admin,
    get_status_history, delete_user
)

# ----- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è -----
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

RENDER_URL = os.getenv("RENDER_EXTERNAL_URL")
if not RENDER_URL:
    raise ValueError("‚ùå RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")

PORT = int(os.getenv("PORT", 5000))
CREATOR_ID = int(os.getenv("CREATOR_ID", "0"))  # —Ç–≤–æ–π ID

# ----- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ -----
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{RENDER_URL}{WEBHOOK_PATH}"

# ----- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è -----
class Registration(StatesGroup):
    waiting_for_fullname = State()
    waiting_for_tabel = State()

class Broadcast(StatesGroup):
    waiting_for_text = State()

# ----- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã -----
user_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üü¢ –Ø –Ω–∞ —Ä–∞–±–æ—Ç–µ (–°–ü)"), KeyboardButton("üî¥ –Ø –±–æ–ª–µ—é (–ë)")],
        [KeyboardButton("üïí –Ø –≤ –¥–æ—Ä–æ–≥–µ (–°–ü)"), KeyboardButton("üìå –£ –º–µ–Ω—è –æ—Ç–≥—É–ª (–í—Ä)")],
        [KeyboardButton("‚ÑπÔ∏è –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å"), KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ],
    resize_keyboard=True
)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
        [KeyboardButton("üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞"), KeyboardButton("‚ùå –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞")],
        [KeyboardButton("‚úâÔ∏è –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")]
    ],
    resize_keyboard=True
)

# ----- /start -----
@dp.message(commands=["start"])
async def cmd_start(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ä–∞–±–æ—á–∏–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
            "–¢—ã —Å–º–æ–∂–µ—à—å –æ—Ç–º–µ—á–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å: —Ä–∞–±–æ—Ç–∞, –±–æ–ª–µ–∑–Ω—å, –¥–æ—Ä–æ–≥–∞, –æ—Ç–≥—É–ª.\n"
            "–ê–¥–º–∏–Ω—ã —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\n"
            "üëâ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û:"
        )
        await state.set_state(Registration.waiting_for_fullname)
    else:
        kb = admin_kb if user.get("is_admin") or message.from_user.id == CREATOR_ID else user_kb
        await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∏–∂–µ:", reply_markup=kb)

# ----- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è -----
@dp.message(state=Registration.waiting_for_fullname)
async def reg_fullname(message: types.Message, state: FSMContext):
    await state.update_data(fullname=message.text)
    await message.answer("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:")
    await state.set_state(Registration.waiting_for_tabel)

@dp.message(state=Registration.waiting_for_tabel)
async def reg_tabel(message: types.Message, state: FSMContext):
    data = await state.get_data()
    fullname = data["fullname"]
    tabel = message.text
    is_admin = message.from_user.id == CREATOR_ID
    await add_user(message.from_user.id, f"{fullname} ({tabel})", is_admin=is_admin)
    await state.clear()
    kb = admin_kb if is_admin else user_kb
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=kb)

# ----- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã -----
@dp.message(lambda m: m.text in ["üü¢ –Ø –Ω–∞ —Ä–∞–±–æ—Ç–µ (–°–ü)", "üî¥ –Ø –±–æ–ª–µ—é (–ë)", "üïí –Ø –≤ –¥–æ—Ä–æ–≥–µ (–°–ü)", "üìå –£ –º–µ–Ω—è –æ—Ç–≥—É–ª (–í—Ä)"])
async def set_user_status(message: types.Message):
    await update_status(message.from_user.id, message.text)
    await message.answer(f"‚úÖ –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {message.text}")

# ----- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -----
@dp.message(lambda m: m.text == "‚ÑπÔ∏è –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å")
async def my_last_status(message: types.Message):
    user = await get_user(message.from_user.id)
    await message.answer(f"üìå –¢–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {user.get('status') or '–µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω'}")

@dp.message(lambda m: m.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def my_status_stats(message: types.Message):
    history = await get_status_history(message.from_user.id)
    if not history:
        await message.answer("üìå –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
        return
    text = "üìä –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:\n"
    for h in history:
        text += f"{h['status_date']}: {h['status']}\n"
    await message.answer(text)

# ----- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã -----
@dp.message(lambda m: m.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def admin_show_users(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user or (not user.get("is_admin") and message.from_user.id != CREATOR_ID):
        return
    users = await get_all_users()
    text = "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for u in users:
        text += f"{u['id']} | {u['full_name']} | {'üõ°Ô∏è –ê–¥–º–∏–Ω' if u['is_admin'] else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
    await message.answer(text)

# ----- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–Ω—è—Ç–∏–µ –∞–¥–º–∏–Ω–æ–≤ -----
@dp.message(lambda m: m.text == "üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def admin_assign(message: types.Message):
    if message.from_user.id != CREATOR_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤")
        return
    users = await get_all_users()
    kb = InlineKeyboardMarkup(row_width=1)
    for u in users:
        if not u["is_admin"]:
            kb.add(InlineKeyboardButton(u["full_name"], callback_data=f"makeadmin_{u['id']}"))
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º:", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("makeadmin_"))
async def callback_makeadmin(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    await make_admin(user_id)
    user = await get_user(user_id)
    await call.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['full_name']} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.")
    await call.answer()

@dp.message(lambda m: m.text == "‚ùå –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞")
async def admin_remove(message: types.Message):
    if message.from_user.id != CREATOR_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–∏–º–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤")
        return
    admins = await get_admins()
    kb = InlineKeyboardMarkup(row_width=1)
    for u in admins:
        if u["id"] != CREATOR_ID:
            kb.add(InlineKeyboardButton(u["full_name"], callback_data=f"removeadmin_{u['id']}"))
    await message.answer("–í—ã–±–µ—Ä–∏ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤:", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("removeadmin_"))
async def callback_removeadmin(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    await revoke_admin(user_id)
    await call.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ª–∏—à—ë–Ω –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞.")
    await call.answer()

# ----- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -----
@dp.message(lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def admin_delete_user(message: types.Message):
    admins = await get_admins()
    if message.from_user.id != CREATOR_ID and message.from_user.id not in [a['id'] for a in admins]:
        return
    users = await get_all_users()
    kb = InlineKeyboardMarkup(row_width=1)
    for u in users:
        if u["id"] != CREATOR_ID:
            kb.add(InlineKeyboardButton(u["full_name"], callback_data=f"deluser_{u['id']}"))
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("deluser_"))
async def callback_delete_user
