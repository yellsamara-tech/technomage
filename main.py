import os
import asyncio
from datetime import date
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from db import init_db, add_user, get_user, update_status, get_all_users, get_status_history, find_user_by_name, get_admins, set_user_status

import nest_asyncio
nest_asyncio.apply()  # –≤–∞–∂–Ω–æ –¥–ª—è Render

# ----- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è -----
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

RENDER_URL = os.getenv("RENDER_EXTERNAL_URL")
if not RENDER_URL:
    raise ValueError("‚ùå RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")

PORT = int(os.getenv("PORT", 5000))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{RENDER_URL}{WEBHOOK_PATH}"

# ----- –ì–æ—Ä—è—á–∏–µ –∫–Ω–æ–ø–∫–∏ -----
status_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="‚úÖ –†–∞–±–æ—Ç–∞—é"), types.KeyboardButton(text="ü§í –ë–æ–ª–µ—é")],
        [types.KeyboardButton(text="üèñ –û—Ç–ø—É—Å–∫"), types.KeyboardButton(text="‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")],
        [types.KeyboardButton(text="‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å"), types.KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")]
    ],
    resize_keyboard=True
)

# ----- –•—ç–Ω–¥–ª–µ—Ä—ã -----
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user = await get_user(message.from_user.id)
    today = date.today()
    if user:
        if user.get("status") and str(user.get("last_update")) != str(today):
            await update_status(user["id"], user["status"])
        await message.answer(
            f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: {user['full_name']}\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:",
            reply_markup=status_kb
        )
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@dp.message()
async def process_message(message: types.Message):
    user = await get_user(message.from_user.id)
    text = message.text.strip()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if not user:
        await add_user(message.from_user.id, text)
        await message.answer(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ–±—è –∫–∞–∫: {text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup=status_kb)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if text == "‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å":
        last_status = user.get("status") or "–µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω"
        await message.answer(f"üìå –¢–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {last_status}")
        return

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
        await message.answer("–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç–æ–º üëá", reply_markup=status_kb)
        return

    if text == "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëá")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    await update_status(user["id"], text)
    await message.answer(f"üìå –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {text}")

# ----- –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ -----
@dp.message(Command("history"))
async def history_handler(message: types.Message):
    admins = await get_admins()
    if not any(a["id"] == message.from_user.id for a in admins):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /history <–§–ò–û>")
        return
    name = args[1]
    users = await find_user_by_name(name)
    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    text = ""
    for u in users:
        history = await get_status_history(u["id"])
        text += f"–°—Ç–∞—Ç—É—Å—ã {u['full_name']}:\n"
        for h in history:
            text += f"{h['status_date']}: {h['status']}\n"
        text += "\n"
    await message.answer(text)

@dp.message(Command("users"))
async def users_handler(message: types.Message):
    admins = await get_admins()
    if not any(a["id"] == message.from_user.id for a in admins):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    users = await get_all_users()
    text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for u in users:
        text += f"{u['full_name']} ‚Äî {u['status'] or '–Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞'}\n"
    await message.answer(text)

# ----- –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ -----
async def send_daily_reminder():
    users = await get_all_users()
    for user in users:
        try:
            await bot.send_message(user["id"], "‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!", reply_markup=status_kb)
        except:
            continue

# ----- Webhook -----
async def handle(request):
    data = await request.json()
    update = types.Update(**data)
    # ‚ö° –í–∞–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: feed_update –≤—ã–∑—ã–≤–∞–µ–º –∫–∞–∫ classmethod
    await Dispatcher.feed_update(dp, update)
    return web.Response()

async def on_startup(app):
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_cleanup(app):
    await bot.delete_webhook()
    await bot.session.close()

async def start_webhook():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle)
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()
    print(f"Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

# ----- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è -----
async def main():
    await init_db()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler
    scheduler = AsyncIOScheduler(timezone=timezone("Asia/Samarkand"))
    scheduler.add_job(send_daily_reminder, 'cron', hour=18, minute=0)
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ webhook
    await start_webhook()

    # –î–µ—Ä–∂–∏–º —Ü–∏–∫–ª –∂–∏–≤—ã–º
    while True:
        await asyncio.sleep(3600)

# ----- –ó–∞–ø—É—Å–∫ -----
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. Webhook —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    loop.run_forever()
