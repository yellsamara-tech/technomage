import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.filters.text import Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiohttp import web
from db import init_db, add_user, get_user, update_status, get_all_users, get_admins, make_admin, revoke_admin

# ===============================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ===============================
BOT_TOKEN = os.getenv("BOT_TOKEN")
CREATOR_ID = int(os.getenv("CREATOR_ID", "0"))
DOMAIN = os.getenv("RENDER_EXTERNAL_HOSTNAME")
PORT = int(os.getenv("PORT", 5000))

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://{DOMAIN}{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ===============================
# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
# ===============================
class Registration(StatesGroup):
    waiting_for_fullname = State()
    waiting_for_tabel = State()

class Broadcast(StatesGroup):
    waiting_for_text = State()

# ===============================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ===============================
user_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üü¢ –Ø –Ω–∞ —Ä–∞–±–æ—Ç–µ (–°–ü)"), KeyboardButton("üî¥ –Ø –±–æ–ª–µ—é (–ë)")],
        [KeyboardButton("üïí –Ø –≤ –¥–æ—Ä–æ–≥–µ (–°–ü)"), KeyboardButton("üìå –£ –º–µ–Ω—è –æ—Ç–≥—É–ª (–í—Ä)")]
    ],
    resize_keyboard=True
)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
        [KeyboardButton("üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞"), KeyboardButton("‚ùå –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞")],
        [KeyboardButton("‚úâÔ∏è –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")]
    ],
    resize_keyboard=True
)

# ===============================
# /start
# ===============================
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ä–∞–±–æ—á–∏–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
            "–¢—ã —Å–º–æ–∂–µ—à—å –æ—Ç–º–µ—á–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å: —Ä–∞–±–æ—Ç–∞, –±–æ–ª–µ–∑–Ω—å, –¥–æ—Ä–æ–≥–∞, –æ—Ç–≥—É–ª.\n"
            "–ê–¥–º–∏–Ω—ã —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
            "üëâ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û:"
        )
        await state.set_state(Registration.waiting_for_fullname)
    else:
        kb = admin_kb if user.get("is_admin") or message.from_user.id == CREATOR_ID else user_kb
        await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∏–∂–µ:", reply_markup=kb)

# ===============================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
# ===============================
@dp.message(Registration.waiting_for_fullname)
async def reg_fullname(message: types.Message, state: FSMContext):
    await state.update_data(fullname=message.text)
    await message.answer("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:")
    await state.set_state(Registration.waiting_for_tabel)

@dp.message(Registration.waiting_for_tabel)
async def reg_tabel(message: types.Message, state: FSMContext):
    data = await state.get_data()
    fullname = data["fullname"]
    tabel = message.text
    is_admin = message.from_user.id == CREATOR_ID
    await add_user(message.from_user.id, f"{fullname} ({tabel})", is_admin=is_admin)
    await state.clear()
    kb = admin_kb if is_admin else user_kb
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=kb)

# ===============================
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã
# ===============================
@dp.message(Text(startswith=["üü¢", "üî¥", "üïí", "üìå"]))
async def set_user_status(message: types.Message):
    await update_status(message.from_user.id, message.text)
    await message.answer(f"‚úÖ –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {message.text}")

# ===============================
# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
# ===============================
@dp.message(Text(equals="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
async def admin_show_users(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user or (not user.get("is_admin") and message.from_user.id != CREATOR_ID):
        return
    users = await get_all_users()
    text = "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for u in users:
        text += f"{u['id']} | {u['full_name']} | {'üõ°Ô∏è –ê–¥–º–∏–Ω' if u['is_admin'] else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
    await message.answer(text)

@dp.message(Text(equals="üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞"))
async def admin_assign(message: types.Message):
    if message.from_user.id != CREATOR_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤")
        return
    users = await get_all_users()
    kb = InlineKeyboardMarkup(row_width=1)
    for u in users:
        if not u["is_admin"]:
            kb.add(InlineKeyboardButton(u["full_name"], callback_data=f"makeadmin_{u['id']}"))
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º:", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("makeadmin_"))
async def callback_makeadmin(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    await make_admin(user_id)
    user = await get_user(user_id)
    await call.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['full_name']} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.")
    await call.answer()

@dp.message(Text(equals="‚ùå –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞"))
async def admin_remove(message: types.Message):
    if message.from_user.id != CREATOR_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–∏–º–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤")
        return
    admins = await get_admins()
    kb = InlineKeyboardMarkup(row_width=1)
    for u in admins:
        if u["id"] != CREATOR_ID:
            kb.add(InlineKeyboardButton(u["full_name"], callback_data=f"removeadmin_{u['id']}"))
    await message.answer("–í—ã–±–µ—Ä–∏ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤:", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("removeadmin_"))
async def callback_removeadmin(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    await revoke_admin(user_id)
    await call.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ª–∏—à—ë–Ω –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞.")
    await call.answer()

@dp.message(Text(equals="‚úâÔ∏è –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"))
async def admin_broadcast(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if not user or (not user.get("is_admin") and message.from_user.id != CREATOR_ID):
        return
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Broadcast.waiting_for_text)

@dp.message(Broadcast.waiting_for_text)
async def send_broadcast(message: types.Message, state: FSMContext):
    text = message.text
    users = await get_all_users()
    success = 0
    fail = 0
    for u in users:
        try:
            await bot.send_message(u["id"], f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n{text}")
            success += 1
        except:
            fail += 1
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {success}, –û—à–∏–±–∫–∏: {fail}")
    await state.clear()

# ===============================
# Webhook —Å–µ—Ä–≤–µ—Ä
# ===============================
async def handle(request: web.Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return web.Response()

async def on_startup(app: web.Application):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_cleanup(app: web.Application):
    await bot.delete_webhook()
    await bot.session.close()

# ===============================
# –ó–∞–ø—É—Å–∫ aiohttp
# ===============================
async def main():
    await init_db()
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle)
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()
    print(f"Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
