import os
import asyncio
from datetime import datetime, date, time, timedelta
import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiohttp import web
from db import (
    init_db, add_user, get_user, update_status, get_all_users,
    get_admins, make_admin, revoke_admin, delete_user, get_status_history, get_users_without_status_today
)

# ----- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è -----
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

CREATOR_ID = int(os.getenv("CREATOR_ID", "0"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-domain.com/webhook
PORT = int(os.getenv("PORT", 8000))     # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SAMARA_TZ = pytz.timezone("Europe/Samara")

# ----- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è -----
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# ----- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è -----
class Registration(StatesGroup):
    waiting_for_fullname = State()
    waiting_for_tabel = State()

class Broadcast(StatesGroup):
    waiting_for_text = State()

# ----- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã -----
statuses = ["üü¢ –Ø –Ω–∞ —Ä–∞–±–æ—Ç–µ (–°–ü)", "üî¥ –Ø –±–æ–ª–µ—é (–ë)", "üïí –Ø –≤ –¥–æ—Ä–æ–≥–µ (–°–ü)", "üìå –£ –º–µ–Ω—è –æ—Ç–≥—É–ª (–í—Ä)"]

user_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=statuses[0]), KeyboardButton(text=statuses[1])],
        [KeyboardButton(text=statuses[2]), KeyboardButton(text=statuses[3])]
    ],
    resize_keyboard=True
)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
        [KeyboardButton(text="üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞"), KeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="‚úâÔ∏è –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"), KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤"), KeyboardButton(text="üóÇ –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤")]
    ],
    resize_keyboard=True
)

# ----- /start -----
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ä–∞–±–æ—á–∏–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
            "–¢—ã —Å–º–æ–∂–µ—à—å –æ—Ç–º–µ—á–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å: —Ä–∞–±–æ—Ç–∞, –±–æ–ª–µ–∑–Ω—å, –¥–æ—Ä–æ–≥–∞, –æ—Ç–≥—É–ª.\n"
            "–ê–¥–º–∏–Ω—ã —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
            "üëâ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û:"
        )
        await state.set_state(Registration.waiting_for_fullname)
    else:
        kb = admin_kb if user.get("is_admin") or message.from_user.id == CREATOR_ID else user_kb
        await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∏–∂–µ:", reply_markup=kb)

# ----- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è -----
@dp.message(Registration.waiting_for_fullname)
async def reg_fullname(message: types.Message, state: FSMContext):
    await state.update_data(fullname=message.text)
    await message.answer("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:")
    await state.set_state(Registration.waiting_for_tabel)

@dp.message(Registration.waiting_for_tabel)
async def reg_tabel(message: types.Message, state: FSMContext):
    data = await state.get_data()
    fullname = data["fullname"]
    tabel = message.text
    is_admin = message.from_user.id == CREATOR_ID
    await add_user(message.from_user.id, f"{fullname} ({tabel})", is_admin=is_admin)
    await state.clear()
    kb = admin_kb if is_admin else user_kb
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=kb)

# ----- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã -----
@dp.message(lambda m: m.text in statuses)
async def set_user_status(message: types.Message):
    await update_status(message.from_user.id, message.text)
    await message.answer(f"‚úÖ –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {message.text}")

# ----- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã -----
async def is_admin_or_creator(user_id: int):
    user = await get_user(user_id)
    return user and (user.get("is_admin") or user_id == CREATOR_ID)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(lambda m: m.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def admin_show_users(message: types.Message):
    if not await is_admin_or_creator(message.from_user.id):
        return
    users = await get_all_users()
    text = "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(
        f"{u['id']} | {u['full_name']} | {'üõ°Ô∏è –ê–¥–º–∏–Ω' if u['is_admin'] else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}" for u in users
    )
    await message.answer(text)

# –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
@dp.message(lambda m: m.text == "üóÇ –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤")
async def admin_status_history(message: types.Message):
    if not await is_admin_or_creator(message.from_user.id):
        return
    users = await get_all_users()
    text = "üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for u in users:
        history = await get_status_history(u["id"])
        text += f"{u['full_name']}:\n"
        for record in history:
            text += f"  {record['date']} ‚Äî {record['status']}\n"
    await message.answer(text)

# ----- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 18:00 (—Å–∞–º–∞—Ä—Å–∫–æ–µ –≤—Ä–µ–º—è) -----
async def daily_reminder():
    while True:
        now = datetime.now(SAMARA_TZ)
        target = datetime.combine(now.date(), time(18, 0, 0, tzinfo=SAMARA_TZ))
        if now > target:
            target += timedelta(days=1)
        await asyncio.sleep((target - now).total_seconds())
        
        users_to_remind = await get_users_without_status_today()
        for u in users_to_remind:
            try:
                await bot.send_message(u["id"], "‚è∞ –ù–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–º–µ—Ç–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è!")
            except:
                pass

# ----- Webhook -----
async def handle(request):
    update = types.Update(**await request.json())
    await dp.feed_update(bot, update)
    return web.Response()

async def on_startup(app):
    await init_db()
    await bot.delete_webhook()
    await bot.set_webhook(WEBHOOK_URL)
    asyncio.create_task(daily_reminder())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ webhook!")

app = web.Application()
app.router.add_post("/webhook", handle)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    web.run_app(app, port=PORT)
