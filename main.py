# main.py
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from db import init_db, get_user, add_user, set_status

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN") or "–í–ê–®_–¢–û–ö–ï–ù"  # –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É —Ç–æ–∫–µ–Ω
WEBHOOK_URL = os.getenv("WEBHOOK_URL") or "https://dia-804u.onrender.com/webhook"

bot = Bot(token=TOKEN)
dp = Dispatcher()


# === –ú–µ–Ω—é —Å—Ç–∞—Ç—É—Å–æ–≤ ===
def get_status_menu():
    buttons = [
        [KeyboardButton(text="‚úÖ –†–∞–±–æ—Ç–∞—é")],
        [KeyboardButton(text="üè† –û—Ç–ø—É—Å–∫"), KeyboardButton(text="ü§í –ë–æ–ª—å–Ω–∏—á–Ω—ã–π")],
        [KeyboardButton(text="üöó –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞"), KeyboardButton(text="‚ùå –í—ã—Ö–æ–¥–Ω–æ–π")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


# === –°—Ç–∞—Ä—Ç ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = await get_user(message.from_user.id)
    if user:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user['full_name']}!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
            reply_markup=get_status_menu()
        )
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û:")


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —à–∞–≥–∞–º ===
@dp.message(F.text.regexp(r"^[–ê-–Ø–∞-—è–Å—ë\s-]+$"))
async def reg_fullname(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –§–ò–û –≤ –ø–∞–º—è—Ç—å (state –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å –ø–æ–∑–∂–µ)
        message.bot["reg"] = {"full_name": message.text}
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:")
    elif not user["full_name"]:
        await message.answer("–§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        # –µ—Å–ª–∏ —é–∑–µ—Ä –µ—Å—Ç—å –∏ —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è
        pass


@dp.message(F.text.regexp(r"^\d{3,6}$"))
async def reg_tab_number(message: types.Message):
    reg = message.bot.get("reg")
    if reg and "full_name" in reg:
        reg["tab_number"] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7...):")


@dp.message(F.text.regexp(r"^\+7\d{10}$"))
async def reg_phone(message: types.Message):
    reg = message.bot.get("reg")
    if reg and "tab_number" in reg:
        await add_user(
            message.from_user.id,
            reg["tab_number"],
            reg["full_name"],
            message.text
        )
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
                             reply_markup=get_status_menu())
        message.bot["reg"] = {}  # –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ


# === –í—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ ===
@dp.message(F.text.in_(["‚úÖ –†–∞–±–æ—Ç–∞—é", "üè† –û—Ç–ø—É—Å–∫", "ü§í –ë–æ–ª—å–Ω–∏—á–Ω—ã–π", "üöó –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞", "‚ùå –í—ã—Ö–æ–¥–Ω–æ–π"]))
async def status_chosen(message: types.Message):
    status = message.text
    await set_status(message.from_user.id, status)
    await message.answer(f"–°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {status}")


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await init_db()
    await bot.set_webhook(WEBHOOK_URL)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –≤–µ–±—Ö—É–∫–æ–º %s", WEBHOOK_URL)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
