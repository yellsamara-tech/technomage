import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

from db import init_db, add_user, get_user, update_status, get_all_users, get_admins

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
CREATOR_ID = 452908347

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class Registration(StatesGroup):
    waiting_for_fullname = State()
    waiting_for_tabel = State()

class Broadcast(StatesGroup):
    waiting_for_text = State()

class AdminAssign(StatesGroup):
    waiting_for_user = State()
    waiting_for_remove = State()

# --- –ö–Ω–æ–ø–∫–∏ ---
user_kb = ReplyKeyboardMarkup(resize_keyboard=True)
user_kb.add("üü¢ –Ø –Ω–∞ —Ä–∞–±–æ—Ç–µ (–°–ü)")
user_kb.add("üî¥ –Ø –±–æ–ª–µ—é (–ë)")
user_kb.add("üïí –Ø –≤ –¥–æ—Ä–æ–≥–µ (–°–ü)")
user_kb.add("üìå –£ –º–µ–Ω—è –æ—Ç–≥—É–ª (–í—Ä)")

admin_kb = ReplyKeyboardMarkup(resize_keyboard=True)
admin_kb.add("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
admin_kb.add("üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞")
admin_kb.add("‚ùå –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞")
admin_kb.add("‚úâÔ∏è –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")

# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if not user:
        await add_user(message.from_user.id, message.from_user.full_name, is_admin=(message.from_user.id == CREATOR_ID))
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ä–∞–±–æ—á–∏–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
            "–°–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç–º–µ—á–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å: —Ä–∞–±–æ—Ç–∞, –æ—Ç–≥—É–ª, –¥–æ—Ä–æ–≥–∞, –±–æ–ª–µ–∑–Ω—å.\n"
            "–ê –∞–¥–º–∏–Ω—ã —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
            "üëâ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –§–ò–û:"
        )
        await Registration.waiting_for_fullname.set()
    else:
        # –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        if user["is_admin"]:
            kb = admin_kb
        else:
            kb = user_kb
        await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∏–∂–µ:", reply_markup=kb)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
@dp.message_handler(state=Registration.waiting_for_fullname)
async def process_fullname(message: types.Message, state: FSMContext):
    await state.update_data(fullname=message.text)
    await message.answer("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:")
    await Registration.waiting_for_tabel.set()

@dp.message_handler(state=Registration.waiting_for_tabel)
async def process_tabel(message: types.Message, state: FSMContext):
    data = await state.get_data()
    fullname = data["fullname"]
    tabel = message.text
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û+—Ç–∞–±–µ–ª—å (—É —Ç–µ–±—è –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å db.py, —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ –∏–º—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
    await add_user(message.from_user.id, f"{fullname} ({tabel})", is_admin=(message.from_user.id == CREATOR_ID))
    await state.finish()
    kb = admin_kb if message.from_user.id == CREATOR_ID else user_kb
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup=kb)

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã ---
@dp.message_handler(lambda m: m.text in [
    "üü¢ –Ø –Ω–∞ —Ä–∞–±–æ—Ç–µ (–°–ü)",
    "üî¥ –Ø –±–æ–ª–µ—é (–ë)",
    "üïí –Ø –≤ –¥–æ—Ä–æ–≥–µ (–°–ü)",
    "üìå –£ –º–µ–Ω—è –æ—Ç–≥—É–ª (–í—Ä)"
])
async def user_status(message: types.Message):
    await update_status(message.from_user.id, message.text)
    await message.answer(f"‚úÖ –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {message.text}")

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
@dp.message_handler(lambda m: m.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def show_users(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user or not user["is_admin"]:
        return
    users = await get_all_users()
    text = "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for u in users:
        text += f"ID: {u['id']} | {u['full_name']} | {'üõ°Ô∏è –ê–¥–º–∏–Ω' if u['is_admin'] else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
    await message.answer(text)

# --- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ---
@dp.message_handler(lambda m: m.text == "üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def assign_admin(message: types.Message):
    if message.from_user.id != CREATOR_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return
    users = await get_all_users()
    kb = InlineKeyboardMarkup()
    for u in users:
        if not u["is_admin"]:
            kb.add(InlineKeyboardButton(u["full_name"], callback_data=f"makeadmin_{u['id']}"))
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("makeadmin_"))
async def make_admin(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    conn = await get_user(user_id)
    if conn:
        from db import asyncpg, DB_URL
        db = await asyncpg.connect(DB_URL)
        await db.execute("UPDATE users SET is_admin=TRUE WHERE id=$1", user_id)
        await db.close()
        await call.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {conn['full_name']} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.")
    await call.answer()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ---
@dp.message_handler(lambda m: m.text == "‚ùå –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞")
async def remove_admin(message: types.Message):
    if message.from_user.id != CREATOR_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–±–∏—Ä–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return
    admins = await get_admins()
    kb = InlineKeyboardMarkup()
    for u in admins:
        if u["id"] != CREATOR_ID:
            kb.add(InlineKeyboardButton(u["full_name"], callback_data=f"removeadmin_{u['id']}"))
    await message.answer("–í—ã–±–µ—Ä–∏ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø–æ–ª–Ω–æ–º–æ—á–∏–π:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("removeadmin_"))
async def do_remove_admin(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    from db import asyncpg, DB_URL
    db = await asyncpg.connect(DB_URL)
    await db.execute("UPDATE users SET is_admin=FALSE WHERE id=$1", user_id)
    await db.close()
    await call.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ª–∏—à—ë–Ω –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞.")
    await call.answer()

# --- –†–∞—Å—Å—ã–ª–∫–∞ ---
@dp.message_handler(lambda m: m.text == "‚úâÔ∏è –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def start_broadcast(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user or not user["is_admin"]:
        return
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await Broadcast.waiting_for_text.set()

@dp.message_handler(state=Broadcast.waiting_for_text)
async def send_broadcast(message: types.Message, state: FSMContext):
    text = message.text
    users = await get_all_users()
    for u in users:
        try:
            await bot.send_message(u["id"], f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n{text}")
        except:
            pass
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.finish()

# --- –ó–∞–ø—É—Å–∫ ---
async def on_startup(dp):
    await init_db()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
