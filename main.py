import os
import asyncio
from datetime import date
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiohttp import web
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from db import init_db, add_user, get_user, update_status, get_all_users, get_status_history, find_user_by_name, get_admins, set_user_status

import nest_asyncio
nest_asyncio.apply()  # –¥–ª—è Render

# ----- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è -----
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

RENDER_URL = os.getenv("RENDER_EXTERNAL_URL")
if not RENDER_URL:
    raise ValueError("‚ùå RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")

PORT = int(os.getenv("PORT", 5000))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{RENDER_URL}{WEBHOOK_PATH}"

# ----- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ -----
status_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="‚úÖ –†–∞–±–æ—Ç–∞—é"), types.KeyboardButton(text="ü§í –ë–æ–ª–µ—é")],
        [types.KeyboardButton(text="üèñ –û—Ç–ø—É—Å–∫"), types.KeyboardButton(text="‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")],
        [types.KeyboardButton(text="‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å"), types.KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")]
    ],
    resize_keyboard=True
)

# ----- –•—ç–Ω–¥–ª–µ—Ä—ã -----
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    try:
        user = await get_user(message.from_user.id)
        if user:
            today = date.today()
            if user.get("status") and user.get("last_update") != today:
                await update_status(user["id"], user["status"])
            await message.answer(
                f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: {user['full_name']}\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", 
                reply_markup=status_kb
            )
        else:
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

@dp.message()
async def process_message(message: types.Message):
    try:
        user = await get_user(message.from_user.id)
        text = message.text.strip()

        if not user:
            await add_user(message.from_user.id, text)
            await message.answer(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ–±—è –∫–∞–∫: {text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup=status_kb)
            return

        if text == "‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å":
            last_status = user.get("status") or "–µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω"
            await message.answer(f"üìå –¢–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {last_status}")
            return

        if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
            await message.answer("–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç–æ–º üëá", reply_markup=status_kb)
            return

        if text == "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
            await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëá")
            return

        await update_status(user["id"], text)
        await message.answer(f"üìå –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {text}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_message: {e}")

# ----- –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã -----
@dp.message(Command("history"))
async def history_handler(message: types.Message):
    try:
        user = await get_user(message.from_user.id)
        if not user or not user.get("is_admin"):
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
            return
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /history <–§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
            return
        name = parts[1]
        rows = await find_user_by_name(name)
        if not rows:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        for u in rows:
            history = await get_status_history(u["id"])
            text = "\n".join([f"{r['status_date']}: {r['status']}" for r in history]) or "–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤"
            await message.answer(f"–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ {u['full_name']}:\n{text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /history: {e}")

@dp.message(Command("admins"))
async def admins_handler(message: types.Message):
    try:
        admins = await get_admins()
        text = "\n".join([f"{a['full_name']} (ID: {a['id']})" for a in admins]) or "–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤"
        await message.answer(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n{text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /admins: {e}")

@dp.message(Command("find"))
async def find_handler(message: types.Message):
    try:
        user = await get_user(message.from_user.id)
        if not user or not user.get("is_admin"):
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
            return
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find <–§–ò–û>")
            return
        name = parts[1]
        rows = await find_user_by_name(name)
        if not rows:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        for u in rows:
            await message.answer(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {u['full_name']} (ID: {u['id']}) –°—Ç–∞—Ç—É—Å: {u.get('status')}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /find: {e}")

# ----- –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ -----
async def send_daily_reminder():
    try:
        users = await get_all_users()
        for user in users:
            try:
                await bot.send_message(user["id"], "‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!", reply_markup=status_kb)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user['id']}: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_daily_reminder: {e}")

# ----- Webhook —Å–µ—Ä–≤–µ—Ä -----
async def handle(request):
    data = await request.json()
    update = types.Update(**data)
    # –¥–ª—è aiogram 3.x –∏—Å–ø–æ–ª—å–∑—É–µ–º feed_update
    await dp.feed_update(update)
    return web.Response()

async def on_startup(app):
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_cleanup(app):
    await bot.delete_webhook()
    await bot.session.close()

async def start_webhook():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle)
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()
    print(f"Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

# ----- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è -----
async def main():
    await init_db()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler
    scheduler = AsyncIOScheduler(timezone=timezone("Asia/Samarkand"))
    scheduler.add_job(send_daily_reminder, 'cron', hour=18, minute=0)
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ webhook
    await start_webhook()

    # –î–µ—Ä–∂–∏–º —Ü–∏–∫–ª –∂–∏–≤—ã–º
    while True:
        await asyncio.sleep(3600)

# ----- –ó–∞–ø—É—Å–∫ -----
if __name__ == "__main__":
    asyncio.run(main())
