import os
import asyncio
from datetime import date
from pytz import timezone

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiohttp import web
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from db import init_db, add_user, get_user, update_status, get_all_users, get_status_history, get_admins

import nest_asyncio
nest_asyncio.apply()  # –í–∞–∂–Ω–æ –¥–ª—è Render

# ----- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è -----
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

RENDER_URL = os.getenv("RENDER_EXTERNAL_URL")
if not RENDER_URL:
    raise ValueError("‚ùå RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")

PORT = int(os.getenv("PORT", 5000))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{RENDER_URL}{WEBHOOK_PATH}"

# ----- –ì–æ—Ä—è—á–∏–µ –∫–Ω–æ–ø–∫–∏ -----
status_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –†–∞–±–æ—Ç–∞—é"), KeyboardButton(text="ü§í –ë–æ–ª–µ—é")],
        [KeyboardButton(text="üèñ –û—Ç–ø—É—Å–∫"), KeyboardButton(text="‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å"), KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")]
    ],
    resize_keyboard=True
)

# ----- –•—ç–Ω–¥–ª–µ—Ä—ã -----
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user = await get_user(message.from_user.id)
    today = date.today()
    if user:
        if user.get("status") and user.get("last_update") != today:
            await update_status(user["id"], user["status"])
        await message.answer(
            f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: {user['full_name']}\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", 
            reply_markup=status_kb
        )
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@dp.message()
async def process_message(message: types.Message):
    user = await get_user(message.from_user.id)
    text = message.text.strip()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user:
        await add_user(message.from_user.id, text)
        await message.answer(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ–±—è –∫–∞–∫: {text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup=status_kb)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if text == "‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å":
        last_status = user.get("status") or "–µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω"
        await message.answer(f"üìå –¢–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {last_status}")
        return

    # –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
        await message.answer("–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç–æ–º üëá", reply_markup=status_kb)
        return

    # –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞
    if text == "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëá")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    await update_status(user["id"], text)
    await message.answer(f"üìå –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {text}")

# ----- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã -----
@dp.message(Command("history"))
async def history_handler(message: types.Message):
    admins = await get_admins()
    admin_ids = [a["id"] for a in admins]
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    users = await get_all_users()
    text = ""
    for u in users:
        history = await get_status_history(u["id"])
        h_text = ", ".join([f"{row['status_date']}: {row['status']}" for row in history])
        text += f"{u['full_name']}: {h_text}\n"
    await message.answer(f"üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:\n{text}")

# ----- –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ -----
async def send_daily_reminder():
    users = await get_all_users()
    for user in users:
        try:
            await bot.send_message(user["id"], "‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!", reply_markup=status_kb)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user['id']}: {e}")

# ----- Webhook —Å–µ—Ä–≤–µ—Ä -----
async def handle(request):
    data = await request.json()
    update = types.Update(**data)
    await dp.update_queue.put(update)  # –∫–ª–∞–¥—ë–º –∞–ø–¥–µ–π—Ç –≤ –æ—á–µ—Ä–µ–¥—å
    return web.Response()

async def on_startup(app):
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_cleanup(app):
    await bot.delete_webhook()
    await bot.session.close()

# ----- –ó–∞–ø—É—Å–∫ webhook -----
async def start_webhook():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle)
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()
    print(f"Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

# ----- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è -----
async def main():
    await init_db()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler
    scheduler = AsyncIOScheduler(timezone=timezone("Asia/Samarkand"))
    scheduler.add_job(send_daily_reminder, 'cron', hour=18, minute=0)
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ webhook
    await start_webhook()

    # –ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–æ–≤
    asyncio.create_task(dp.start_dispatching(bot))

    # –î–µ—Ä–∂–∏–º —Ü–∏–∫–ª –∂–∏–≤—ã–º
    while True:
        await asyncio.sleep(3600)

# ----- –ó–∞–ø—É—Å–∫ -----
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. Webhook —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    loop.run_forever()
